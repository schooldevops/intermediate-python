from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import uvicorn

app = FastAPI(title="도서 관리 API")

class Book(BaseModel):
    id: int
    title: str
    author: str
    price: float
    in_stock: bool = True

books_db = []

@app.post("/books/", response_model=Book)
async def create_book(book: Book):
    books_db.append(book)
    return book

@app.get("/books/", response_model=List[Book])
async def read_books():
    return books_db

@app.get("/books/{book_id}", response_model=Book)
async def read_book(book_id: int):
    book = next((book for book in books_db if book.id == book_id), None)
    if book is None:
        raise HTTPException(status_code=404, detail="Book not found")
    return book

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)from fastapi import FastAPI, HTTPException
    from pydantic import BaseModel
    from typing import List, Optional
    import uvicorn
    
    app = FastAPI(title="도서 관리 API")
    
    class Book(BaseModel):
        id: int
        title: str
        author: str
        price: float
        in_stock: bool = True
    
    books_db = []
    
    @app.post("/books/", response_model=Book)
    async def create_book(book: Book):
        books_db.append(book)
        return book
    
    @app.get("/books/", response_model=List[Book])
    async def read_books():
        return books_db
    
    @app.get("/books/{book_id}", response_model=Book)
    async def read_book(book_id: int):
        book = next((book for book in books_db if book.id == book_id), None)
        if book is None:
            raise HTTPException(status_code=404, detail="Book not found")
        return book
    
    if __name__ == "__main__":
        uvicorn.run(app, host="0.0.0.0", port=8000)